

HttpServletRequest

  教学导航


 教学目标

 案例一、完成用户注册

 案例二、完成登录错误信息的回显


 教学方法

  


  1． HttpServletRequest 概述

我们在创建 Servlet 时会覆盖 service() 方法，或 doGet()/doPost(), 这些方法都有两个参数，一个为代表请求的 request 和代表响应 response 。

service 方法中的 request 的类型是 ServletRequest ，而 doGet/doPost 方法的 request 的类型是 HttpServletRequest ， HttpServletRequest 是 ServletRequest 的子接口，功能和方法更加强大，今天我们学习 HttpServletRequest 。

  2． request 的运行流程




  3． 通过抓包工具抓取 Http 请求




因为 request 代表请求，所以我们可以通过该对象分别获得 Http 请求的请求行，请 求头和请求体

  4． 通过 request 获得请求行

获得客户端的请求方式： String getMethod ()

获得请求的资源：

String getRequestURI ()

StringBuffer getRequestURL ()

String getContextPath () ---web 应用的名称

String getQueryString () ---- get 提交 url 地址后的参数字符串

username=zhangsan&password=123

 

注意： request 获得客户机（客户端）的一些信息

request.getRemoteAddr() --- 获得访问的客户端 IP 地址

  5． 通过 request 获得请求头

long getDateHeader ( String name)

String getHeader ( String name)

Enumeration getHeaderNames ()

Enumeration getHeaders ( String name)

int getIntHeader ( String name)

 

referer 头的作用：执行该此访问的的来源

做防盗链

  6． 通过 request 获得请求体

请求体中的内容是通过 post 提交的请求参数，格式是：

username=zhangsan&password=123&hobby=football&hobby=basketball

key ---------------------- value

username                     [zhangsan]

password                     [123]

hobby                         [football ， basketball]

                       

 

以上面参数为例，通过一下方法获得请求参数：

String getParameter ( String name)

String [] getParameterValues ( String name)

Enumeration getParameterNames ()

Map <String,String[]> getParameterMap ()

 

 

      注意： get 请求方式的请求参数 上述的方法一样可以获得

 

      解决 post 提交方式的乱码： request.setCharacterEncoding("UTF-8");

      解决 get 提交的方式的乱码：

parameter = new String(parameter.getbytes("iso8859-1"),"utf-8");

  7． request 的其他功能 (1) request 是一个域对象

request 对象也是一个存储数据的区域对象，所以也具有如下方法：

setAttribute ( String name, Object o)

getAttribute ( String name)

removeAttribute ( String name)

 

注意： request 域的作用范围：一次请求中 (2) request 完成请求转发

获得请求转发器 ---- path 是转发的地址

RequestDispatcher getRequestDispatcher ( String path)

通过转发器对象转发

requestDispathcer. forward ( ServletRequest request, ServletResponse response)

 

           

            注意： ServletContext 域与 Request 域的生命周期比较？

         ServletContext ：

            创建：服务器启动

            销毁：服务器关闭

            域的作用范围：整个 web 应用

         request ：

            创建：访问时创建 request

            销毁：响应结束 request 销毁

            域的作用范围：一次请求中

 

            注意：转发与重定向的区别？

         1 ）重定向两次请求，转发一次请求

         2 ）重定向地址栏的地址变化，转发地址不变

         3 ）重新定向可以访问外部网站 转发只能访问内部资源

         4 ）转发的性能要优于重定向

        

           

            注意：客户端地址与服务器端地址的写法？

         客户端地址：

            是客户端去访问服务器的地址，服务器外部的地址，特点：写上 web 应用名             称

           

            直接输入地址：

            重定向

           

 

 

         服务器端地址：

                  服务器内部资源的跳转的地址，特点：不需要写 web 应用的名称

 

            转发

 

 

 

 

总结：

request 获得行的内容

      request.getMethod()

      request.getRequestURI()

      request.getRequestURL()

      request.getContextPath()

      request.getRemoteAddr()

request 获得头的内容

      request.getHeader(name)

request 获得体（请求参数）

      String request.getParameter(name)

      Map<String,String[]> request.getParameterMap();

      String[] request.getParameterValues(name);

      注意：客户端发送的参数 到服务器端都是字符串

 

      获得中文乱码的解决：

         post:request.setCharacterEncoding(“UTF-8”);

         get:

parameter = new String(parameter.getBytes(“iso8859-1”),”UTF-8”);

 

request 转发和域

      request.getRequestDispatcher( 转发的地址 ).forward(req,resp);

      request.setAttribute(name,value)

      request.getAttribute(name)