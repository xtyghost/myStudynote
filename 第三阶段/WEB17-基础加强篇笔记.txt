第 17 章 WEB17- 基础加强 篇

今日任务

Ø   使用自定义注解完成仿 @Test 的作用 .

Ø   使用 Servlet3.0 完成文件上传 .

Ø   使用动态代理解决网站的字符集编码

教学导航


 教学目标

 了解 JDK 中提供的三个注解

 会自定义注解及注解的反射 .

 能够简单使用 Servlet3.0

 掌握动态代理技术

 了解类加载器


 教学方法

 案例驱动法
1.1 上次课内容回顾：

Listener:

* 监听器：指的是一个 Java 类用来监听另一个 Java 类的变化

* 事件源 : 被监听的对象 .

* 监听器 : 监听的对象

* 事件源与监听器绑定 :

* 事件 : 事件源的改变 . 获得事件源对象 .

 

* WEB 的监听器：

    * 三类 :

        * 一类 : 用来监听三个域对象的创建和销毁的监听器 .

        * 二类 : 用来监听三个域对象的属性变更的监听器 .

        * 三类 : 用来监听 HttpSession 中 JavaBean 的对象状态的变化的监听器 .

 

Filter:

* 过滤器 : 过滤的是从客户端向服务器发送的请求 .

* Filter 生命周期 :

    * 服务器启动的创建 , 服务器关闭的时候销毁的 .

* FilterConfig:

    * 获得过滤器名称 , 过滤器的初始化参数 , 获得 ServletContext.

* FilterChain:

    * 过滤器链 .

* Filter 相关配置 :

    * <dispatcher>:

        * REQUEST ：

        * FORWARD

        * INCLUDE

        * ERROR

* 过滤器的应用 :

    * 自动登录 :

    * 通用的字符集编码的过滤器 : 1.2 案例一：模拟 @Test 的功能实现代码 : 1.2.1 需求 :

定义一个类 , 在类中编写一些测试方法 : 测试方法的格式 :public void xxx() 在测试方法上添加 @MyTest 然后可以使这个类中添加了有 @MyTest 注解的方法执行 . 1.2.2 分析 : 1.2.2.1   技术分析 :

【注解的概述】

Ø 注解和注释区别 :

* 注释 : 给程序员看的 .

* 注解 : 给虚拟机看的 .( 让虚拟机看到程序中的注解 , 注解代表程序的一些特殊的功能 .)

【 JDK 中提供的注解】

Ø @Override       : 描述子类重写父类的方法 :

* JDK1.5 版本的时候 该注解只能应用在 类的继承上 .

* JDK1.6 版本的时候 该注解可以应用在 类的实现上 .

Ø @SuppressWarnings  : 压制警告 .

Ø @Deprecated          : 描述方法过时 .

【自定义注解】

Ø 自定义注解 :

* 定义类      :class

* 定义接口    :interface

* 定义枚举    :enum

* 定义注解    :@interface

Ø 代码实现 :

/**

 * 定义一个注解 : 名称是 Anno1

 */

@interface Anno1{

   

}

Ø 定义注解的属性 :

 Invalid type Date for the annotation attribute Anno2.d; only primitive type, String, Class, annotation, enumeration are permitted or 1-dimensional arrays thereof

* 注解的属性的类型 :

    * 基本数据类型 :

    * String 类型 :

    * Class 类型 :

　　 * 注解类型 :

    * 枚举类型 :

    * 以上类型的一维数组 :

* 代码实现 :

/**

 * 定义一个带有属性的注解 :Anno2

 */

@interface Anno2{

    int a();

    boolean b() default false;

    String s();

    // Date d();

    Class c();

    Anno1 anno1();

    Color color();

    String[] arrs();

}

***** 特殊的属性名称 :value

     * 如果使用注解的时候 , 只出现了 value 属性 ,value 属性可以省略的 . 1.2.3 代码实现 :

【步骤一】：自定义注解 :MyTest

【步骤二】：定义核心运行类 .

【步骤三】：在核心运行类中 .

    * 获得测试类的 Class

    * 获得 Class 中的所有方法 .

    * 遍历得到每个方法 .

    * 判断方法上有 MyTest 注解 , 就执行该方法 .

         * 自定义注解默认存在于源码阶段 , 需要让注解存在的时间更长 . 使用元注解 :( 只用于修饰其他的注解 )

 

代码：

public class CoreRunner {

 

    public static void main(String[] args) throws IllegalAccessException, IllegalArgumentException, InvocationTargetException, InstantiationException {

        /**

         * 获得测试类的 Class.

         * 获得 Class 中的所有的方法 .

         * 遍历每个方法 , 查看每个方法上是否有 MyTest 注解 .

         * 有 MyTest 注解 , 这个方法就执行 .

         */

       

        // 1. 获得测试类的 Class:

        Class clazz = AnnotationDemo1.class;

        // 2. 获得 Class 中的所有的方法 : 规定了测试的方法必须是 public.

        Method[] methods = clazz.getMethods();

        // 3. 遍历每个方法 :

        for(Method method:methods){

            boolean flag = method.isAnnotationPresent(MyTest.class);

            // System.out.println(method.getName()+ "     " + flag);

            if(flag){

                // 说明方法上有 MyTest 注解 :

                method.invoke(clazz.newInstance(), null);

            }

        }

    }

} 1.3 案例二：使用 Servlet3.0 完成一个文件上传的功能 : 1.3.1 需求 :

在网站上有商品维护 , 上传商品图片 , 需要使用文件上传 :

1.3.2 分析 : 1.3.2.1   技术分析 :

【文件上传的概述】

Ø 文件上传 :

* 指的是将本地的文件 写到 服务器上 .

Ø 文件上传技术 :

* Servlet3.0       : 注解开发 , 文件上传 , 异步请求 .

* JSPSmartUpload   : 嵌入到 JSP 中完成文件上传 . 主要用于 Model1 年代的 .

* FileUpload       :Apache 的文件上传组件 .

* Struts2          : 底层是 FileUpload.

Ø 文件上传的要素 :

* 表单的提交的方式必须是 POST.

* 表单中需要有文件上传的表单元素 : 这个元素这个元素必须有 name 属性和值 :<input type=”file” name=”upload”>

* 表单的 enctype 属性的值必须是 multipart/form-data.

【 Servlet3.0 】

Ø Servlet3.0 与 Servlet2.5 提供了三个新特性 :

* 注解开发    ：方便

* 文件上传    ：有些 API 不是特别全 .

* 异步请求    ：

【 Servlet3.0 的注解开发】

Ø @WebServlet

Ø @WebListener

Ø @WebFilter

【文件上传原理分析】

Ø 设计文件上传的页面 :

进行文件上传的抓包分析 :

没有设置 enctype 属性的时候 : 只能获得文件的名称 , 而没有文件内容 .

设置 enctype 属性为 multipart/form-data: 获得到文件名及文件内容 .

1.3.3 代码实现 :

【步骤一】：设置一个文件上传页面 .

【步骤二】：点击提交 , 提交到 Servlet 中 .

【步骤三】：在 Servlet 中接收参数 .

【步骤四】：获得服务器的文件上传的路径 .

【步骤五】：通过流写到该路径下就 OK 了 .

代码 :

@WebServlet("/UploadServlet")

@MultipartConfig

public class UploadServlet extends HttpServlet {

    private static final long serialVersionUID = 1L;

    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {

        // 接收普通数据 :

        request.setCharacterEncoding("UTF-8");

        String filedesc = request.getParameter("filedesc");

        System.out.println(" 文件描述 "+filedesc);

        // 接收文件 :

        Part part = request.getPart("upload");

       

        long size = part.getSize();// 获得文件大小 :

        System.out.println(" 文件大小 :"+size);

        String name = part.getName();

        System.out.println(" 文件表单中的 name 属性的名称 "+name);

        // 获得文件名 :

        String header = part.getHeader("Content-Disposition");

        int idx = header.lastIndexOf("filename=\"");

        String fileName = header.substring(idx+10, header.length()-1);

        System.out.println(" 文件名 :"+fileName);

        // 获得文件内容 :

        InputStream is = part.getInputStream();

        // 获得 upload 的路径 :

        String path = this.getServletContext().getRealPath("/upload");

        OutputStream os = new FileOutputStream(path+"/"+fileName);

        byte[] b = new byte[1024];

        int len = 0;

        while((len = is.read(b))!=-1){

            os.write(b, 0, len);

        }

        is.close();

        os.close();

    }

 

    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {

        doGet(request, response);

    }

 

} 1.3.4 总结 : 1.3.4.1   文件上传问题：文件名重名 .

使用随机的唯一文件名：

* 使用 UUID 作为随机的文件名 . 1.3.4.2   文件上传问题：一个目录下存放的文件过多 .

一个目录下文件过多 , 导致打开都很慢 , 更别说是读写操作 .

目录分离 :

* 按时间分    : 一个月一个目录 , 一个星期一个目录 , 一天一个目录

* 按数量分    : 一个目录下存 5000 个文件 , 创建一个新的目录 , 再去存放 .

* 按用户分    : 为每个用户创建一个单独目录 存放文件 .

* 按目录分离算法分        :

    * 使用唯一文件名 .hashCode(); -- 得到一个代表当前这个文件的 int 类型值 .

    * int 类型占 4 个字节 32 位 . 可以让 hashCode 值 &0xf; 得到一个 int 值 , 用这个 int 值作为一级目录 .

    * 让 hashCode 右移 4 位 &0xf ; 得到一个 int 值 , 用这个 int 值作为二级目录 . 依次类推 . 1.3.4.3   Servlet3.0 异步请求：

/**

 * 异步请求的 Servlet

 */

@WebServlet(urlPatterns="/AsyncServlet",asyncSupported=true)

public class AsyncServlet extends HttpServlet {

    private static final long serialVersionUID = 1L;

 

    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {

        AsyncContext context = request.startAsync(request, response);

        context.start(new MyRunnable(context));

       

        for(int i = 1;i<=10;i++){

            System.out.println(i);

            try {

                Thread.sleep(500);

            } catch (InterruptedException e) {

                e.printStackTrace();

            }

        }

    }

 

    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {

        doGet(request, response);

    }

 

}

 

class MyRunnable implements Runnable{

    private AsyncContext context;

    public MyRunnable(AsyncContext context) {

        this.context = context;

    }

    @Override

    public void run() {

        for(char i='a';i<='z';i++){

            try {

                context.getResponse().getWriter().println(i);

                Thread.sleep(100);

            } catch (Exception e) {

                e.printStackTrace();

            }

        }

    }

   

} 1.4 案例三：使用动态代理完成字符集编码过滤器的编写 1.4.1 需求 :

无论 使用 GET 还是 POST 提交 , 到 Servlet 中只需要调用 request.getParameter 方法 , 中文乱码就已经处理好 . 1.4.2 分析 : 1.4.2.1   技术分析 :

【 request 中的方法的增强】

Ø 继承     : 能够控制这个类的构造 .

Ø 装饰者    : 增强的类和被增强的类实现相同的接口 , 增强的类中获得到被增强的类的引用 .

* 接口中方法过多 , 只增强其中的某个方法 . 其他的方法也需要重写 .

Ø 动态代理 : 被增强的类实现了接口 .

【代理的概述】

Ø 代理     :

Ø JDK 中动态代理     :Proxy 对象 .

* Proxy.newProxyInstance(ClassLoader cl,Class[] interfaces, InvocationHandler ih);

【动态代理入门】 :

  1.4.3 代码实现 :

@WebFilter(urlPatterns="/*")

public class GenericEncodingFilter implements Filter {

 

    @Override

    public void init(FilterConfig filterConfig) throws ServletException {

 

    }

 

    @Override

    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)

            throws IOException, ServletException {

        final HttpServletRequest req = (HttpServletRequest) request;

        // 增强 req:

        HttpServletRequest myReq = (HttpServletRequest) Proxy.newProxyInstance(req.getClass().getClassLoader(),

                req.getClass().getInterfaces(), new InvocationHandler() {

                   

                    @Override

                    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {

                        // 判断执行的方法是否是 getParameter:

                        if("getParameter".equals(method.getName())){

                            // 调用的是 getParameter: 需要增强这个方法 .

                            // 判断请求方式是 GET 还是 POST:

                            String type = req.getMethod();

                            if("get".equalsIgnoreCase(type)){

                                String value = (String) method.invoke(req, args);

                                value = new String(value.getBytes("ISO-8859-1"),"UTF-8");

                                return value;

                            }else if("post".equalsIgnoreCase(type)){

                                req.setCharacterEncoding("UTF-8");

                            }

                        }

                        return method.invoke(req, args);

                    }

                });

       

        chain.doFilter(myReq, response);

    }

 

    @Override

    public void destroy() {

 

    }

 

}

  1.4.4 总结 : 1.4.4.1   代理的企业应用 :

【 Spring 的 AOP 】

AOP 的底层使用的就是代理机制 :

* AOP   : 面向切面编程 . 新的思想 , 用来解决 OOP 中遇到的一些问题！！！

  1.4.4.2   类加载器 :

类的加载器：将 class 文件加载到 JVM 中执行这个文件 .

 

Java 中将类加载器分成三类 :

引导类加载器 :     JAVA_HOME/jre/lib/rt.jar

     |

扩展类加载器 :     JAVA_HOME/jre/lib/ext/*.jar

     |

应用类加载器 :     加载类路径下的所有的 class.

 

这些类加载器如何保证类只会加载一次而且不会重复加载 :

类加载器的全盘委托机制 :

 

class A {

String s;

 

}

由应用类加载器得到 A.class String,class, 委托给扩展类加载器 , 扩展类加载器又委托给引导类加载器 . 引导类加载器加载 String.class. 将其他的类的 class 向下给扩展类加载器 . 扩展类加载器没有找到 . 向下给应用类加载器 , 将 A.class 加载 .